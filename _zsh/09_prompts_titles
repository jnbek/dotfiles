if [[ -z "$WINDOW" ]]; then
    export PS1='([J:%j]%n@%m[%~]%# '
else
    export PS1='([J:%j]%n($WINDOW)@%m[%~]%# '
fi
export RPROMPT=' [%W][%*]%)'  # right side prompt string
export PS2='%_>'
SPROMPT="${YELLOW}zsh: correct '%U%R%u' to '%U%r%u' ${NORM}\
${BLUE}[Nyae]?${NORM} "
## Window Titles
function preexec() {
  local a=${${1## *}[(w)1]}  # get the command
#  local b=${a##*\/}   # get the command basename
#  a="${b}${1#$a}"     # add back the parameters
#  a=${a//\%/\%\%}     # escape print specials
#  a=$(print -Pn "$a" | tr -d "\t\n\v\f\r")  # remove fancy whitespace
#  a=${(V)a//\%/\%\%}  # escape non-visibles and print specials
#  a=$(echo $a | cut -c1-15)
  case "$TERM" in
    screen|screen*)
      # See screen(1) "TITLES (naming windows)".
      # "\ek" and "\e\" are the delimiters for screen(1) window titles
      print -Pn "\ek%-3~ $(echo $1 | cut -c1-15)\e\\" # set screen title.  Fix vim: ".
      print -Pn "\e]2;%-3~ $1\a" # set xterm title, via screen "Operating System Command"
      ;;
    rxvt*|xterm*)
      if [[ ! -z $WINDOW ]]; then
          print -Pn "\ek%-3~ $a\e\\" # set screen title.  Fix vim: ".
      fi;
      print -Pn "\e]2;%m:%-3~ $a\a"
      ;;
  esac
}
  case "$TERM" in
    rxvt*|xterm*)
        function precmd() {
            #print -Pn "\e]1;%-3~\a" # must (re)set xterm title
            print -Pn "\e]0;%n@%m: %~\a"
        }
      ;;  
    screen|screen*)
        function precmd() {
            print -Pn "\ek%n@%m:%~\a"
        }
      ;;
  esac
TRAPWINCH () {
    zle || return 0
    zle reset-prompt
}

##################################
## update the prompt automagically
## update ~about~ every 30 seconds
## this can be invoked manually with a "kill -ALRM" to the shell (from another process)
TMOUT=$[(${RANDOM}%15)+25]
TRAPALRM () {
    zle || return 0
    zle reset-prompt
}
