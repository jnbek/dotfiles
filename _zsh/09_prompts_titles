if [[ -z "$WINDOW" ]]; then
    export PS1='([J:%j]%n@%m[%~]%# '
else
    export PS1='([J:%j]%n($WINDOW)@%m[%~]%# '
fi
autoload -Uz vcs_info
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%r %b%F{3}|%F{1}%a%F{5}][%i]%f '
    #'%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%r %b%F{3}|%F{1}%a%F{5}][C:%c U: %u: M: %m]%f '
zstyle ':vcs_info:*' formats       \   
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%r %b%F{5}][%i]%f '
    #'%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%r %b%F{5}][C:%c U:%u M:%m]%f '
zstyle ':vcs_info:*' branchformat '%b:%r'

zstyle ':vcs_info:*' enable git cvs svn hg

# or use pre_cmd, see man zshcontrib
vcs_info_wrapper() {
  vcs_info
  if [ -n "$vcs_info_msg_0_" ]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}${del}[%W][%*]%)"
  else
    echo "[%W][%*]%)"
  fi  
}
export RPROMPT=$'$(vcs_info_wrapper)'
export PS2='%_>'
export SPROMPT="${YELLOW}zsh: correct '%U%R%u' to '%U%r%u' ${NORM}\
${BLUE}[Nyae]?${NORM} "
    ## Window Titles
    function preexec() {
    local a=${${1## *}[(w)1]}  # get the command
    #  local b=${a##*\/}   # get the command basename
    #  a="${b}${1#$a}"     # add back the parameters
    #  a=${a//\%/\%\%}     # escape print specials
    #  a=$(print -Pn "$a" | tr -d "\t\n\v\f\r")  # remove fancy whitespace
    #  a=${(V)a//\%/\%\%}  # escape non-visibles and print specials
    #  a=$(echo $a | cut -c1-15)
    case "$TERM" in
    screen|screen*)
        # See screen(1) "TITLES (naming windows)".
        # "\ek" and "\e\" are the delimiters for screen(1) window titles
        print -Pn "\ek%-3~ $(echo $1 | cut -c1-25)\e\\" # set screen title.  Fix vim: ".
        print -Pn "\e]2;%-3~ $1\a" # set xterm title, via screen "Operating System Command"
        ;;
    rxvt*|xterm*)
        if [[ ! -z $WINDOW ]]; then
            print -Pn "\ek%-3~ $a\e\\" # set screen title.  Fix vim: ".
        fi;
        print -Pn "\e]2;%m:%-3~ $a\a"
        ;;
    esac
}
function postexec() {
case "$TERM" in
rxvt*|xterm*)
    function precmd() {
    #print -Pn "\e]1;%-3~\a" # must (re)set xterm title
    print -Pn "\e]0;%n@%m: %~\a"
}
;;  
    screen|screen*)
        function precmd() {
        print -Pn "\ek%n@%m:%~\a"
    }
    ;;
esac
}
TRAPWINCH () {
    #zle || return 0
    zle reset-prompt
}

##################################
## update the prompt automagically
## update ~about~ every 30 seconds
## this can be invoked manually with a "kill -ALRM" to the shell (from another process)
TMOUT=$[(${RANDOM}%15)+25]
TRAPALRM () {
    #zle || return 0
    zle reset-prompt
}
