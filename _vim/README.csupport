README for c.vim (Version 4.2.1) / August 26 2006

  *  DESCRIPTION
  *  INSTALLATION
  *  RELEASE NOTES 
  *  FILES
  *  ADDITIONAL TIPS
  *  CREDITS

=======================================================================================
  DESCRIPTION
=======================================================================================
C/C++-IDE for Vim/gVim. It is written to considerably speed up writing code in
a consistent style.  This is done by inserting complete statements,idioms, code
snippets, templates, and comments.  Syntax checking, compiling,  running a
program, running splint and indent can be done with a keystroke.  There are
many additional hints and options which can improve speed and comfort when
writing C/C++. See the help file csupport.txt for more information.

=======================================================================================
  INSTALLATION
=======================================================================================
The subdirectories in the zip archive  cvim.zip  mirror the directory structure 
which is needed below the local installation directory $HOME/.vim/ for LINUX/UNIX
($VIM/vimfiles/ for Windows; find the value of $VIM with ":echo $VIM" from inside Vim).

(1) Copy the zip archive cvim.zip to $HOME/.vim and run

      unzip cvim.zip

    If you have already an older version of cvim and you have modified the template
    files you may want to save your templates first or copy the files from the 
    archive by hand.

(2) Set at least some personal details into the file $HOME/.vimrc (file $VIM\_vimrc 
    under Windows). Here is the minimal personalization (my settings as an example, 
    of course):

      let g:C_AuthorName      = 'Dr.-Ing. Fritz Mehner'     
      let g:C_AuthorRef       = 'Mn'                         
      let g:C_Email           = 'mehner@fh-swf.de'            
      let g:C_Company         = 'FH Südwestfalen, Iserlohn'    

There are a lot of features and options which can be used and influenced:

  *  use of template files and tags
  *  surround marked blocks with statements
  *  using and managing personal code snippets
  *  generate/remove multiline comments 
  *  picking up prototypes
  *  C/C++ dictionaries for keyword completion
  *  removing the root menu

Restart gVim/Vim generate the help tags  

  :helptags ~/.vim/doc

and look at csupport help with

  :help csupport 

or use the 'help' entry in the root menu of this plug-in.

             +-----------------------------------------------+
             | +-------------------------------------------+ |
             | |    ** PLEASE READ THE DOCUMENTATION **    | |
             | |    Actions differ for different modes!    | |
             | +-------------------------------------------+ |
             +-----------------------------------------------+


=======================================================================================
  RELEASE NOTES FOR VERSION 4.2.1
=======================================================================================
+ Bugfix: change needed for some menu names after patch 7.0.054 .

=======================================================================================
  OLDER RELEASE NOTES : see file 'ChangeLog'
=======================================================================================

=======================================================================================
  FILES
=======================================================================================

README.csupport                 This file.
ChangeLog                       The change log.

doc/csupport.txt                The help file for the local on-line help. 
doc/c-hotkeys.pdf               Hotkey reference card.
                          
ftplugin/c.vim                  A file type plug-in. Define hotkeys, creates a local 
                                dictionary for each C/C++ file.

plugin/c.vim                    The C/C++ plug-in for GVIM.
plugin/wrapper.sh               The wrapper script for the use of an xterm.

plugin/templates/c-class-description            -+- C-style and C++-style template files
plugin/templates/c-file-header                   |  (see csupport.txt)
plugin/templates/c-frame                         |   
plugin/templates/c-function-description          |
plugin/templates/c-method-description            |
plugin/templates/cpp-class-description           | 
plugin/templates/cpp-file-header                 |
plugin/templates/cpp-frame                       |
plugin/templates/cpp-function-description        |
plugin/templates/cpp-method-description          |
plugin/templates/h-file-header                   |
plugin/templates/hpp-file-header                 |
plugin/templates/c-class                         |
plugin/templates/c-class-using-new               |
plugin/templates/c-template-class                |
plugin/templates/c-template-class-using-new      |
plugin/templates/c-error-class                   |
plugin/templates/cpp-class                       |
plugin/templates/cpp-class-using-new             |
plugin/templates/cpp-template-class              |
plugin/templates/cpp-template-class-using-new    |
plugin/templates/cpp-error-class                -+

plugin/templates/c-function-description.long      old version of /c-function-description
plugin/templates/cpp-function-description.long    old version of /cpp-function-description
                                                  These templates overdo the commenting of
                                                  functions in most cases.

wordlists/c-c++-keywords.list   All C and C++ keywords (already in word.list).
wordlists/german.list           German words for commenting sources.
wordlists/k+r.list              K&R-Book: Words from the table of content. They appear
                                frequently in comments.
wordlists/stl_index.list        Standard Template Library (STL): method and type names


-----------------------   -------------------------------------------------------------
                          The following files and extensions are for convenience only.
                          c.vim will work without them.
                          -------------------------------------------------------------

rc/customization.ctags       Additional settings I use in  .ctags to enable navigation
                             through makefiles ans qmake files with the plug-in taglist.vim.

rc/costumization.gvimrc      Additional settings I use in .gvimrc :
                             hot keys, mouse settings, ...
                             The file is commented. Append it to your .gvimrc if you like.

rc/costumization.indent.pro  Additional settings I use in .indent.pro :
                             See the indent manual.

rc/costumization.vimrc       Additional settings I use in .vimrc :  incremental search,
                             tabstop, hot keys, font, use of dictionaries, ...
                             The file is commented. Append it to your .vimrc if you like.

c-templates-comm.zip         The C/C++ templates from the previous versions (without 
                             method comments).

c-templates+comm.zip         The C/C++ templates with method comments.

=======================================================================================
  ADDITIONAL TIPS
=======================================================================================

(1) gVim. Toggle 'insert mode' <--> 'normal mode' with the right mouse button
    (see mapping in file costumization.gvimrc).

(2) gVim. Use tear off menus.

(3) Try 'Focus under mouse' as window behavior (No mouse click when the mouse pointer 
    is back from the menu entry).

(4) Use Emulate3Buttons "on" (X11) even for a 3-button mouse. Pressing left and right
    button at the same time without moving your fingers is faster then moving a finger
    to the middle button (often a wheel).

=======================================================================================
  CREDITS
=======================================================================================

  Some ideas are taken from the following documents:

  1. Recommended C Style and Coding Standards (Indian Hill Style Guide)
      www.doc.ic.ac.uk/lab/secondyear/cstyle/cstyle.html
  2. Programming in C++, Ellemtel Telecommunication Systems Laboratories
      www.it.bton.ac.uk/burks/burks/language/cpp/cppstyle/ellhome.htm
  3. C++ Coding Standard, Todd Hoff
     www.possibility.com/Cpp/CppCodingStandard.html

  The splint error format is taken from the file splint.vim (Vim standard distribution).  

------------------

  ... finally

  Johann Wolfgang von Goethe (1749-1832), the greatest of the German poets,
  about LINUX, Vim/gVim and other great tools (Ok, almost.) :

    Ein Mann, der recht zu wirken denkt,         Who on efficient work is bent, 
    Muß auf das beste Werkzeug halten.           Must choose the fittest instrument.  

  Faust, Teil 1, Vorspiel auf dem Theater      Faust, Part 1, Prologue for the Theatre 

=======================================================================================
